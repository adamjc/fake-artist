AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Resources:
  # Static Files
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: fake-artist
      WebsiteConfiguration:
        IndexDocument: index.html

  API:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Fake-Artist-API
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.messageType
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      ApiKeyRequired: False
      RouteKey: "$default"
      Target: !Sub integrations/${APIIntegration}
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      ApiKeyRequired: False
      RouteKey: "$disconnect"
      Target: !Sub integrations/${APIIntegration}
  APIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref API
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        # The path of the lambda, see: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-custom-integrations.html
        !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandlerArn}/invocations 
          - { HandlerArn: !GetAtt Handler.Arn }
      CredentialsArn: !GetAtt APIIntegrationRole.Arn
  APIIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref API
      IntegrationId: !Ref APIIntegration
      IntegrationResponseKey: /*/
  APIIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
        -
          PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Handler.Arn
  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      ApiId: !Ref API
      AutoDeploy: True

  Handler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fake-artist
      Runtime: nodejs12.x
      CodeUri: server/
      Handler: index.handler
      Policies:
        -
          Statement:
            - 
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
              Resource: 
                - !GetAtt Table.Arn
                - !Sub
                  - ${TableArn}/index/room_id-index
                  - { TableArn: !GetAtt Table.Arn }
        -
          Statement:
            -
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: arn:aws:execute-api:*:*:*
        -
          Statement:
            - 
              Effect: Allow
              Action: 
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:GetLogEvents
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: fake-artist
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - 
          AttributeName: connection_id
          AttributeType: S
        -
          AttributeName: room_id
          AttributeType: S
      KeySchema:
        -
          AttributeName: connection_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - 
          IndexName: room_id-index
          KeySchema:
            -
              AttributeName: room_id
              KeyType: HASH
          Projection: 
            ProjectionType: ALL
      Tags:
        - Key: project
          Value: fake-artist